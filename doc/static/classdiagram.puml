@startuml
'Dom√¶nemodellen giver nye entity klasser
'Pakker, model og util
!pragma layout smetana

class Main
class StartMenu
package "util"{
    class TextUI
    class FileIO
}

package "model"{
    class Player
    class Field
      class Dice
      class Account
      class CardDeck
       class Card
      class Board
          class Visit
            class Tax
            class Parking
            class Start
          class Chance
          class Property
          class Prison
          class Plot
          class Building
          class Business
          class ShippingLine
          class Brewery
}

Main *-- Game
Game *-- TextUI
Game *-- FileIO
Game *-- Player
Player *-- Account
Player *-- Card
Game *--Board
Game *-- Dice
Board *-- Field
Board *-- CardDeck
CardDeck *-- Card
Field <|-- Visit
Field <|-- Tax
Field <|-- Parking
Field <|-- Start
Field <|-- Chance
Field <|-- Property
Field <|-- Prison
Property <|-- Plot
Plot <|-- Building
Property <|-- Business
Business <|-- ShippingLine
Business <|-- Brewery


Main : + static void main(string [] args)

Player  : - String name
Player  : - int balance
'---_new-----
Player : - Account account
Player : - ArrayList<Card> cards
Player : - ArrayList<Deed> deeds
'-----------
Player  : + Player(String name, int Balance)
Player : - int position
Player  : + String toString()
Player  : + int getBalance()
Player : + String getName()
Player : + int getPosition()
'----new-----
Player  : +int updatePosition(int value)
Player : -boolean startPassed()
Player : + void buyProperty(int amount)
Player : + void pay(int amount, Player recipient)
Player : + void pay(int amount)
Player : + void collect(int amount)
Player : + void receive(int amount)

'-----------
Account :  - int balance
Account  : + void withdraw(int amount)
Account  : + void deposit(int amount)
Account  : + int getBalance()

Game : - static ArrayList<Player> players
Game : - int maxPlayers
Game : - TextUI ui
Game : - FileIO io
Game : - Player currentplayer
Game : - static CardDeck cardDeck
Game : - Board board
Game : - Dice dice
Game : + Game(int maxPlayers, int minPlayers)
Game : - void registerPlayer(String name, int amount)
Game : + void setup()
Game : - void runPlayerSetupDialog();
Game : - void runGameLoop()
Game : - void throwAndMove()
Game : - void endGame()
Game : - void displayPlayers()
Game : - Player getPlayer(int i)

TextUI : + String getInput(String msg)
TextUI : - Scanner scanner
TextUI : + void displayMessage(String msg)


FileIO : - Scanner scanner
FileIO : + ArrayList<Player> readPlayerData(String path)
FileIO : + void savePlayerData(ArrayList<Player> players)
FileIO : + String[] readBoardData(String path, int length)

Field : - String label
Field : - int ID
Field : - int cost
Field : - int income
Field : - String option
Field : + Field(ID, label, cost, income)
Field : + String toString()
Field : + String onLand(Player p)
Field : + String processResponse(Player p)
Field : # String onAccept(Player p)
Field : # String onReject(Player p)


Property : - int serieID
Property : + String toString()
Property : + String onLand(Player p)
Property : # String onAccept()
Property : # String onReject()

Plot : + String onLand(Player p)
Business : + String onLand(Player p)
Business : # String onAccept()
Business : # String onReject()

ShippingLine : + String onLand(Player p)
ShippingLine : # String onAccept()
ShippingLine : # String onReject()

Brewery : + String onLand(Player p)
Brewery : # String onAccept()
Brewery : # String onReject()

Board : - Field[] fields
Board : + Board(String [] fields, String [] cards])
Board : - void createFields(String [] data)
Board : + Field getField(int id)

CardDeck : - String[] carddata
CardDeck : - ArrayList<Card> cards
CardDeck : + CardDeck
CardDeck : + CardDeck(String[] carddata)
CardDeck : + Card getNext()

Card : -String message
Card : -int income
Card : -int cost
Card : -String event
Card : +Card(String message, int income, int cost, String event)

Dice : +boolean isDouble
Dice : +int rollDiceSum()
@enduml
